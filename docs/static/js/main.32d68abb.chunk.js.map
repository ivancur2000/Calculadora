{"version":3,"sources":["components/Keyboard.js","components/InputDisplay.js","CalculatorApp.js","index.js","hooks/useCalculate.js"],"names":["Keyboard","handleOnClickNumber","handleOnClickOperation","handleOnReset","handleOnResolve","className","map","number","onClick","symbol","InputDisplay","value","type","join","disabled","CalculatorApp","useCalculate","inputValue","root","document","getElementById","ReactDOM","render","useState","setInputValue","inputOperation","setInputOperation","result","useEffect","length","lastSymbol","substr","response","eval","toString"],"mappings":"mLAGaA,EAAW,SAAC,GAAmF,IAAjFC,EAAgF,EAAhFA,oBAAqBC,EAA2D,EAA3DA,uBAAwBC,EAAmC,EAAnCA,cAAeC,EAAoB,EAApBA,gBAKnF,OACA,qBAAKC,UAAU,iBAAf,SACI,sBAAKA,UAAU,YAAf,UACI,qBAAKA,UAAU,oBAAf,SANU,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAQXC,KAAI,SAAAC,GAAM,OAChB,wBACIF,UAAU,yBAEVG,QAAU,kBAAKP,EAAqBM,IAHxC,SAKKA,GAHIA,QAQrB,sBAAKF,UAAU,uBAAf,UACI,wBACIA,UAAU,yBACVG,QAAUL,EAFd,gBAMA,wBACIE,UAAU,wBACVG,QAAUJ,EAFd,eAzBO,CAAC,IAAK,IAAK,IAAK,KAgCRE,KAAI,SAAAG,GAAM,OACjB,wBACIJ,UAAU,uBAEVG,QAAU,kBAAKN,EAAuBO,IAH1C,SAKKA,GAHIA,eCtCpBC,EAAe,SAAC,GAAc,IAAZC,EAAW,EAAXA,MAC3B,OACI,uBACIC,KAAK,OACLP,UAAU,eACVM,MAAOA,EAAME,KAAK,IAClBC,UAAQ,K,OCHPC,G,MAAgB,WAAK,IAAD,EAQzBC,cALAC,EAHyB,EAGzBA,WACAhB,EAJyB,EAIzBA,oBACAC,EALyB,EAKzBA,uBACAC,EANyB,EAMzBA,cACAC,EAPyB,EAOzBA,gBAGJ,OACI,sBAAKC,UAAU,sBAAf,UACI,oDACA,cAAC,EAAD,CAAcM,MAAOM,IACrB,cAAC,EAAD,CACIhB,oBAAqBA,EACrBC,uBAAwBA,EACxBC,cAAeA,EACfC,gBAAiBA,SCpB3Bc,EAAOC,SAASC,eAAe,QACrCC,IAASC,OAAO,cAAC,EAAD,IAAmBJ,I,0rBCHtBF,aAAe,SAAfA,eAAoB,IAAD,UAEQO,oDAAS,IAFjB,wMAErBN,WAFqB,cAETO,cAFS,yBAGgBD,oDAAS,IAHzB,yMAGrBE,eAHqB,cAGLC,kBAHK,cAKtBC,OAASF,eAAeZ,KAAK,IAEnCe,sDAAU,WACN,GAAGD,OAAOE,QAAU,EAAE,CAClB,IAAMC,WAAaH,OAAOI,QAAQ,GAClC,OAAQD,YACJ,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACD,MACJ,QAEI,IAAME,SAAWC,KAAKN,QACtBH,cAAc,CAACQ,SAASE,iBAItC,CAACP,SAEH,IAAM1B,oBAAsB,SAACM,GACzBiB,eAAc,+MAASP,YAAT,CAAqBV,QAGjCL,uBAAyB,SAACO,GACH,IAAtBQ,WAAWY,SACVH,kBAAkB,GAAD,2LAAKD,gBAAL,oLAAwBR,WAAWJ,KAAK,KAAxC,CAA6CJ,KAC9De,cAAc,MAIhBrB,cAAgB,WAClBuB,kBAAkB,IAClBF,cAAc,KAGZpB,gBAAkB,WACK,IAAtBa,WAAWY,QACVH,kBAAkB,GAAD,2LAAKD,gBAAL,oLAAwBR,WAAWJ,KAAK,QAIjE,MAAM,CACFZ,wCACAC,8CACAE,gCACAD,4BACAc,0B","file":"static/js/main.32d68abb.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Keyboard = ({ handleOnClickNumber, handleOnClickOperation, handleOnReset, handleOnResolve })=>{\n\n    const btnNumber = [1,2,3,4,5,6,7,8,9,0];\n    const operations = ['+', '-', '/', '*'];\n\n    return(\n    <div className='flex flex-wrap'>\n        <div className='row w-100'>\n            <div className='col-6 number__pad'>\n                {\n                    btnNumber.map(number =>(\n                        <button\n                            className='btn btn-lg btn-success'\n                            key={number}\n                            onClick={ ()=> handleOnClickNumber( number ) }\n                        >\n                            {number}\n                        </button>\n                    ))\n                }\n            </div>\n            <div className='col-6 operation__pad'>\n                <button \n                    className='btn btn-lg btn-warning'\n                    onClick={ handleOnReset }\n                >\n                    CE\n                </button>\n                <button \n                    className='btn btn-lg btn-danger'\n                    onClick={ handleOnResolve }\n                >\n                    =\n                </button>\n                {\n                    operations.map(symbol => (\n                        <button\n                            className='btn btn-lg btn-light'\n                            key={symbol}\n                            onClick={ ()=> handleOnClickOperation(symbol) }\n                        >\n                            {symbol}\n                        </button>\n                    ))\n                }\n            </div>\n        </div>\n    </div>\n    );\n}\nKeyboard.propTypes = {\n    handleOnClickNumber: PropTypes.func.isRequired,\n    handleOnClickOperation: PropTypes.func.isRequired,\n    handleOnReset: PropTypes.func.isRequired,\n    handleOnResolve: PropTypes.func.isRequired,\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const InputDisplay = ({ value }) =>{\n    return(\n        <input\n            type=\"text\"\n            className='form-control'\n            value={value.join('')}\n            disabled\n        />\n    );\n}\nInputDisplay.propTypes = {\n    value: PropTypes.array.isRequired,\n}","import React from 'react';\nimport { Keyboard } from \"./components/Keyboard\";\nimport { InputDisplay } from \"./components/InputDisplay\";\nimport { useCalculate } from './hooks/useCalculate';\nimport './public/css/CalculatorApp.css';\n\nexport const CalculatorApp = ()=>{\n\n    const { \n        inputValue,\n        handleOnClickNumber,\n        handleOnClickOperation,\n        handleOnReset,\n        handleOnResolve \n    } = useCalculate();\n\n    return(\n        <div className='calculator__content'>\n            <h1>Calculator App!!!!</h1>\n            <InputDisplay value={inputValue} />\n            <Keyboard \n                handleOnClickNumber={handleOnClickNumber} \n                handleOnClickOperation={handleOnClickOperation}\n                handleOnReset={handleOnReset}\n                handleOnResolve={handleOnResolve}\n            />\n        </div>\n    );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {CalculatorApp} from \"./CalculatorApp\";\n\nconst root = document.getElementById('root');\nReactDOM.render(<CalculatorApp />, root);\n","import { useState, useEffect } from \"react\"\n\nexport const useCalculate = ()=>{\n\n    const [inputValue, setInputValue] = useState([]);\n    const [inputOperation, setInputOperation] = useState([]);\n\n    const result = inputOperation.join('');\n\n    useEffect(() => {\n        if(result.length >= 1){\n            const lastSymbol = result.substr(-1);\n            switch (lastSymbol) {\n                case '+':\n                case '-':\n                case '/':\n                case '*':\n                    break;\n                default:\n                    //TODO buscar alternativa a eval\n                    const response = eval(result);\n                    setInputValue([response.toString()]);\n                    break;\n            }\n        }\n    },[result]);\n\n    const handleOnClickNumber = (number)=>{\n        setInputValue(()=> [...inputValue, number]);\n    }\n\n    const handleOnClickOperation = (symbol)=>{\n        if(inputValue.length !== 0){\n            setInputOperation([...inputOperation, ...inputValue.join(''), symbol]);\n            setInputValue([]);\n        }\n    }\n    \n    const handleOnReset = ()=>{\n        setInputOperation([]);\n        setInputValue([]);\n    }\n\n    const handleOnResolve = ()=>{\n        if(inputValue.length !== 0){\n            setInputOperation([...inputOperation, ...inputValue.join('')]);\n        }\n    }\n\n    return{\n        handleOnClickNumber,\n        handleOnClickOperation,\n        handleOnResolve,\n        handleOnReset,\n        inputValue,\n    }\n}"],"sourceRoot":""}